# IELTS speaking exam simulator

# Goal of the project

- To create a platform for users to practice IELTS speaking exams where they can get instant feedback on their performance. Users should feel real online speaking exam experience.

# Hume AI

- Hume AI is a tool that can be used to generate realistic speaking exam feedback.

# Interactions with Hume AI

- When the user starts the exam, the AI will generate a random question.
- The user will then respond to the question.
- The AI will then generate a feedback for the user's response.
- The feedback will be displayed to the user.

# Integrations with Hume AI

- We have three configurations in HUME AI platform: Speaking Part 1, Speaking Part 2, and Speaking Part 3. And we connect to configurations via configuration IDs to VoiceControl component of Hume AI. We configured each configuration to generate a random question and a feedback for the user's response. We gave custom IELTS speaking exam instructions and prompts to each configuration.

## Tech Stack

⚛️ **Core**

- Next.js 15 (App Router)
- React 19
- TypeScript 5.4.5
- Supabase
- Hume AI

🎨 **UI & Styling**

- Tailwind CSS 3
- @radix-ui/react
- @shadcn/ui
- classnames
- zod
- framer-motion

🛠️ **Development**

- ESLint
- Prettier

## Naming Conventions

📁 **Files & Directories**

- Components: PascalCase (`Button.tsx`, `UserProfile.tsx`)
- Utilities: camelCase (`formatDate.ts`, `useAuth.ts`)
- Tests: ComponentName.test.tsx (`Button.test.tsx`)

🏷️ **TypeScript**

- Interfaces: IComponentName (`IButtonProps`, `IUserData`)
- Types: TComponentName (`TButtonVariant`, `TTheme`)
- Enums: PascalCase (`ButtonState`, `UserRole`)
- Generic Types: TPrefixedName<T> (`TResponse<Data>`)

📝 **Variables & Functions**

- React Components: PascalCase (`export function Button()`)
- Custom Hooks: useNoun (`useAuth`, `useForm`)
- Event Handlers: handleEvent (`handleClick`, `handleSubmit`)
- Boolean Variables: isState (`isLoading`, `hasError`)
- Context: NounContext (`ThemeContext`, `AuthContext`)

## Syntax and Formatting

⌨️ **Code Style**

- Use "function" over arrow functions for components
- Keep components pure and focused
- Prefer early returns over nested conditions
- Use template literals for string interpolation

🔍 **TypeScript**

- Write explicit return types for functions
- Use type inference for simple variables
- Prefer union types over enums
- Keep generics simple and descriptive

🎨 **JSX & Components**

- Destructure props in function parameters
- Keep JSX clean with helper functions
- Extract complex logic to custom hooks

## Git Usage

🔄 **Commit Types**

- `fix:` bug fixes
- `feat:` new features
- `perf:` performance improvements
- `docs:` documentation changes
- `style:` formatting changes
- `refactor:` code refactoring
- `test:` adding/updating tests
- `chore:` maintenance tasks

📝 **Message Format**

```text
type(scope): concise, short and descriptive message
```

✅ **Best Practices**

- Use lowercase for messages
- Add details for complex changes
- Reference issues: #123

## Quick Reference

🏗️ **Project Structure**

```
src/
├── app/                   # Pages and route components
│   └── auth/
│       └── login/         # Direct pages
├── components/            # Shared components
├── hooks/                 # React hooks
├── mocks/                 # Test data
├── services/              # API integrations
├── styles/                # Global styles
└── utils/                 # Helpers
```

📦 **Imports**

```typescript
// ✅ Use aliases
import { Button } from "@/components/ui/Button";
// ❌ No relative paths
import { Button } from "../../components/ui/Button";
```

🎨 **Styling**

```typescript
// ✅ Use theme tokens
className = "text-theme-font-primary bg-theme-bg-primary";
// ❌ No hard-coded values
className = "text-[#4F4E55] bg-[#FFFFFF]";

// ✅ Group classes with classnames
import cn from "classnames";
const classes = cn(
  "flex items-center", // layout
  "font-body text-base", // typography
  "bg-theme-btn-primary" // theme
);
```

## Key Rules

### Components

- Place route-specific components in `(components)/`
- Use `@radix-ui/react` for UI components
- Use `@shadcn/ui` to create UI components
- Keep components small and focused

### Styling

- Use theme tokens from `tailwind.config.js`
- Group classes by: layout → typography → theme → state
- Use JIT features for custom values: `mt-[117px]`

### Quality

- Run ESLint before commits
- Follow Next.js best practices
- Write tests for shared components

### Commit Messages

- Use `fix:` for bug fixes
- Use `feat:` for new features
- Use `perf:` for performance improvements
- Use `docs:` for documentation changes
- Use `style:` for formatting changes
- Use `refactor:` for code refactoring
- Use `test:` for adding/updating tests
- Use `chore:` for maintenance tasks

# Hume AI

- Use Hume AI to generate realistic speaking exam feedback
